#ifndef __GT_GTL_SCANNER_HPP__
#define __GT_GTL_SCANNER_HPP__

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * @brief Makes ::GTLFLexLexer visible to Scanner.
 *
 * <p>Similar code is executed inside scanner.cpp generated with Flex - code in if instuction is repeated,
 * so that other classes (Scanner in particular) would see see ::GTLFlexLexer.</p>
 */
 #ifndef __GTL_FLEX_LEXER__
#    define  __GTL_FLEX_LEXER__
#    undef   yyFlexLexer
#    define  yyFlexLexer GTLFlexLexer
#    include <FlexLexer.h>
#    undef   yyFlexLexer
#endif /* END #ifndef __GTL_FLEX_LEXER__ */

/**
 * @brief Makes Scanner::lex() function signature of generated main scanning function.
 */
#undef  YY_DECL
#define YY_DECL int GT::GTL::Scanner::lex()

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace GT {
namespace GTL {

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Scans for tokens declared by Parser class in given stream.
 *
 * <p>Its content is generated by Flex (Lex?) from scanner.yy class. Acts as a more convinient wrapper
 * GTLFlexLexer </p>
 *
 * @author Mateusz Kubuszok
 *
 * @see Parser
 * @see ::GTLFlexLexer
 */
class Scanner : public GTLFlexLexer {
    /**
     * @brief Field used during token scanning - contains actual value of parsed chain.
     */
    Parser::semantic_type* lval;

public:
    /**
     * @brief Initiates Scanner with input stream that serves as data source.
     *
     * @param inputStream input stream initiating Scanner
     */
    Scanner(
        InputStream* inputStream
    );

    /**
     * @brief Scans for next token.
     *
     * @param newlval initiates next scanning with value
     * @return        returns number of next token
     */
    virtual int lex(
        Parser::semantic_type* newlval
    );

private:
    /**
     * @brief Actual lexer/scanner function.
     *
     * <p>Uses source defined by the constructor. Its body is generated from scanner.yy file by Flex with
     * YY_DECL macroinstruction.</p>
     *
     * @return value used for communicating with Parser
     */
    int lex();
}; /* END class Scanner */

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

} /* END namespace GTL */
} /* END namespace GT */

#endif /* END #ifndef __GT_GTL_SCANNER_HPP__ */
